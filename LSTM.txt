x=df.iloc[:,1]
y= df.iloc[:,0]

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(analyzer = 'word',lowercase = True)
x_poly = cv.fit_transform(x).toarray()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_poly,y,train_size =0.80,random_state=42)

vocabulary_size = 5000
from keras import Sequential
from keras.layers import Embedding, LSTM, Dense, Dropout
max_words=507
embedding_size=16
model=Sequential()

model.add(Embedding(vocabulary_size, embedding_size, input_length=max_words))
model.add(LSTM(1000))
model.add(Dense(2, activation='sigmoid'))

#model.add(Embedding(vocabulary_size, embedding_size, input_length=max_words))
#model.add(LSTM(100))
model.add(Dense(1, activation='softmax'))

print(model.summary())


model.compile(loss='binary_crossentropy', 
             optimizer='adam', 
             metrics=['accuracy'])
             
batch_size = 64
num_epochs = 3
X_valid, y_valid = x_train[:batch_size], y_train[:batch_size]
X_train2, y_train2 = x_train[batch_size:], y_train[batch_size:]
model.fit(X_train2, y_train2, validation_data=(X_valid, y_valid), batch_size=batch_size, epochs=num_epochs)


scores = model.evaluate(x_test, y_test, verbose=0)
print('Test accuracy:', scores[1])


